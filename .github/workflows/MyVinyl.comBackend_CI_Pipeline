name: MyVinyl.com CI
on: [push]

jobs:

Sonarcloud:

  name: Sonarcloud Analyze
  runs-on: windows-latest
  steps:
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu' # Alternative distribution options are available.
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"StanvanBavel_MyVinyl.comBackend" /o:"stanvanbavel" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build 
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"


  Build & Test:
  needs: [Sonarcloud Analyze]
  runs-on: ubuntu-latest
  name: ApiGateway_Build&Test
  steps:
    - uses: actions/checkout@v2
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0' # Check for latest at link at .NET 5 download page
    - run: dotnet build MyVinyl.com_ocelot_apigateway
    - run: dotnet test MyVinyl.com_ocelot_apigateway

  Build & Test Vinylservice:
  runs-on: ubuntu-latest
  name: VinylService_Build&Test
  steps:
    - uses: actions/checkout@v2
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0' # Check for latest at link at .NET 5 download page
    - run: dotnet build MyVinyl.com
    - run: dotnet test MyVinyl.com


  Docker_ApiGateway:
  needs: [Sonarcloud Analyze, ApiGateway_Build&Test]
  runs-on: ubuntu-latest
  name: Docker_Publish ApiGateway
  defaults:
      run:
          working-directory: 'MyVinyl.com_ocelot_apigateway'
  steps:
  -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v1
  -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
  -
      name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  -
      name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
          file: ./MyVinyl.com_ocelot_apigateway/Dockerfile
          push: true
          tags: stanvb/MyVinyl.com_ocelot_apigateway:latest


  Docker_VinylService:
  needs: [Sonarcloud Analyze, VinylService_Build&Test]
  runs-on: ubuntu-latest
  defaults:
    run:
      working-directory: 'MyVinyl.com'
  steps:
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    -
      name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    -
      name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        file: ./MyVinyl.com/Dockerfile
        push: true
        tags: stanvb/myvinyl.com_vinyl_service:latest
